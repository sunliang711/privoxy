#!/bin/bash
rpath="$(readlink ${BASH_SOURCE})"
if [ -z "$rpath" ];then
    rpath=${BASH_SOURCE}
fi
root="$(cd $(dirname $rpath) && pwd)"
cd "$root"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
cyan=$(tput setaf 5)
reset=$(tput sgr0)
runAsRoot(){
    cmd="$@"
    if [ -z "$cmd" ];then
        echo "${red}Need cmd${reset}"
        exit 1
    fi

    if (($EUID==0));then
        sh -c "$cmd"
    else
        if ! command -v sudo >/dev/null 2>&1;then
            echo "Need sudo cmd"
            exit 1
        fi
        sudo sh -c "$cmd"
    fi
}

user=${SUDO_USER:-$(whoami)}
home=$(eval echo ~$user)

db="$(cat db)"

mylog(){
    datetime=$(date +%FT%T)
    echo "$datetime $*"
}

usage(){
    cat<<-EOF
	Usage: $(basename $0)
	CMD:
	    start           <id>
	    stop            <id>
	    restart         <id>
	    status          <id>
	    add
	    list
	    del             <id>
	    pac             <id>    edit pac file
	    log             <id>
	    edit            <id> [-n NAME] [-l LOCAL_PORT] [-u UPSTREAM] [-L LOGDIR] [-p ISPAC]
	    copy|cp         <id> [newid]
	    em
	EOF
    if [ "$(uname)" == "Darwin" ];then
        cat<<-EOF

	    pacProxy        <upstream> [pacServerPort]    set MacOS system pac proxy
	    unsetPacProxy
	    socksProxy      <socks port>
	    unsetSocksProxy

	    macProxy|mp        <options>
	EOF
    fi

    exit 1
}

# the following line comes from install.sh
# sqlite3 "$db" "CREATE TABLE config(id integer primary key autoincrement,name varchar,local_port int unique,upstream varchar,logdir varchar,ispac int);"
add(){
    echo "Enter name local_port upstream [ispac:default 0] [logdir:default /tmp] [id]"
    read name local_port upstream ispac logdir id
    if [ -z $name ] || [ -z $local_port ] || [ -z "$upstream" ];then
        echo "${red}Input error.${reset}"
        exit 1
    fi
    if [ -z $logdir ];then
        logdir=/tmp
    fi
    if [ -z $ispac ];then
        ispac=0
    fi
    mylog "insert data..."
    if [ -z $id ];then
        sqlite3 "$db" "insert into config(name,local_port,upstream,logdir,ispac) values('$name',$local_port,'$upstream','$logdir',$ispac);" || { echo "${red}Add failed.${reset}"; exit 1; }
    else
        sqlite3 "$db" "insert into config(id,name,local_port,upstream,logdir,ispac) values($id,'$name',$local_port,'$upstream','$logdir',$ispac);" || { echo "${red}Add failed.${reset}"; exit 1; }
    fi
}

list(){
    echo -e ".header on\n.mode column\n.width 5 20 10\n select * from config;" | sqlite3 "$db"
}

delete(){
    id=${1:?'missing id'}
    NAME="$(bash name.sh $id)"
    if [ -z "$NAME" ];then
        exit 1
    fi
    stop $id
    rm runtime/$NAME.action 2>/dev/null
    rm runtime/$NAME.config 2>/dev/null
    rm runtime/$NAME.plist 2>/dev/null
    rm runtime/$NAME.service 2>/dev/null
    rm $home/Library/LaunchAgents/$NAME.plist 2>/dev/null

    sqlite3 "$db" "delete from config where id=$id;"
}

start(){
    id=${1:?'missing id'}
    #tmux new-session -d -s "pac" privoxy --no-daemon --pidfile /tmp/pac.privoxy.pid $root/runtime/pac.config
    #tmux new-window -d -t "privoxy"  privoxy --no-daemon --pidfile /tmp/global.privoxy.pid $root/runtime/global.config
    #tmux new-session -d -s "global"  privoxy --no-daemon --pidfile /tmp/global.privoxy.pid $root/runtime/global.config

    #TODO 如果存在了怎么办;现在是每次开启都从新生成相关配置文件、服务文件
    bash createConfig.sh "$id"
    NAME="$(bash name.sh $id)"
    servicename="$NAME"

    case $(uname) in
        Linux)
            if (($EUID!=0));then
                sudo systemctl start $servicename.service
            else
                systemctl start $servicename.service
            fi
            ;;
        Darwin)
            launchctl load -w $home/Library/LaunchAgents/$servicename.plist
            echo "Set system http and https proxy? [y/n]"
            read ans
            if [ "$ans" == 'y' ];then
                record="$(bash queryById.sh $id)"
                #must set IFS
                IFS=$'|'
                #must use "$record" instead of $record
                read unuse_name local_port upstream logdir ispac <<< "$record"
                bash macProxy/setMacProxy.sh unset
                bash macProxy/setMacProxy.sh http ${local_port}
                bash macProxy/setMacProxy.sh https ${local_port}
            fi
            ;;
    esac
}

stop(){
    id=${1:?'missing id'}
    NAME="$(bash name.sh $id)"
    if [ -z "$NAME" ];then
        echo "No such service with id: $id"
        exit 1
    fi
    servicename="$NAME"
    #tmux kill-session -t "pac"
    #tmux kill-session -t "global"
    case $(uname) in
        Linux)
            if (($EUID!=0));then
                sudo systemctl stop $servicename
                sudo systemctl stop $servicename
            else
                systemctl stop $servicename
                systemctl stop $servicename
            fi
            ;;
        Darwin)
            launchctl unload -w $home/Library/LaunchAgents/$servicename.plist
            echo "Clear system http and https proxy? [y/n]"
            read ans
            if [ "$ans" == 'y' ];then
                bash macProxy/setMacProxy.sh unset
            fi
            ;;
    esac
}

status(){
    id=${1:?'missing id'}
    NAME="$(bash name.sh $id)"
    if [ -z "$NAME" ];then
        echo "No such service with id: $id"
        exit 1
    fi
    servicename="$NAME"
    case $(uname) in
        Linux)
            systemctl status $servicename.service
            ;;
        Darwin)
            launchctl list | grep $servicename
            ;;
    esac
}

pac(){
    # editor=vi
    # if command -v vim >/dev/null 2>&1;then
    #     editor=vim
    # fi

    # case $(uname) in
    #     Linux)
    #         STAT='stat'
    #         ;;
    #     Darwin)
    #         STAT='stat -x'
    #         ;;
    # esac
    # pacFile=template/pac.action
    # before="$($STAT $pacFile | grep Modify)" 

    # $editor template/pac.action

    # after="$($STAT $pacFile | grep Modify)" 

    # if [ "$before" != "$after" ];then
    #     echo "Please ${red}Restart${reset} manually."
    # else
    #     echo "pac file not changed."
    # fi

    editor=vi
    if command -v vim >/dev/null 2>&1;then
        editor=vim
    fi
    pacFile=template/pac.action
    sha1sum "${pacFile}" > "${pacFile}.sha1"
    $editor template/pac.action
    if ! sha1sum -c --status "${pacFile}.sha1";then
        echo "${blue}Pac file changed."
        echo "Restart related service when needed."
    else
        echo "${cyan}Pac file not changed."
    fi
    rm "${pacFile}.sha1"
}

log(){
    id=${1:?'missing id'}

    NAME="$(bash name.sh $id)"
    if [ -z "$NAME" ];then
        exit 1
    fi
    record="$(bash queryById.sh $id)"
    # must set IFS
    IFS=$'|'
    # must use "$record" instead of $record
    read name local_port upstream logdir ispac <<< "$record"
    logfile="$NAME.log"
    tail -f $logdir/$logfile
}

edit(){
    id=${1:?'missing id'}
    shift
    record="$(bash queryById.sh $id)"
    if [ -z $record ];then
        exit 1
    fi
    # must set IFS
    IFS=$'|'
    # must use "$record" instead of $record
    read name local_port upstream logdir ispac <<< "$record"
    changed=0
    while getopts ":n:l:u:L:p:" opt;do
        case $opt in
            n)
                if [ "$name" != $OPTARG ];then
                    changed=1
                    name=$OPTARG
                fi
                ;;
            l)
                if [ "$local_port" != $OPTARG ];then
                    changed=1
                    local_port=$OPTARG
                fi
                ;;
            u)
                if [ "$upstream" != $OPTARG ];then
                    changed=1
                    upstream=$OPTARG
                fi
                ;;
            L)
                if [ "$logdir" != $OPTARG ];then
                    changed=1
                    logdir=$OPTARG
                fi
                ;;
            p)
                if [ "$ispac" != $OPTARG ];then
                    changed=1
                    ispac=$OPTARG
                fi
                ;;
            \?)
                echo "Unkonw option \"$OPTARG\""
                exit 1
                ;;
            :)
                echo "Need arg for option: \"$OPTARG\""
                exit 1
                ;;
        esac
    done

    if [ $changed == 1 ];then
        sqlite3 "$db" "update config set name='$name',local_port=$local_port,upstream='$upstream',logdir='$logdir',ispac='$ispac' where id=$id;"
        echo "Please restart manaually"
    else
        echo "No change."
    fi
}

copy(){
    id=${1:?'missing id'}
    newid=${2}
    record="$(bash queryById.sh $id)"
    if [ -z $record ];then
        exit 1
    fi

    if [ -n "$newid" ];then
        sqlite3 "$db" "insert into config(id,name,upstream,logdir,ispac) select $newid,name,upstream,logdir,ispac from config where id=$id;"
    else
        sqlite3 "$db" "insert into config(name,upstream,logdir,ispac) select name,upstream,logdir,ispac from config where id=$id;"
    fi


}

em(){
    editor=vi
    if command -v vim>/dev/null 2>&1;then
        editor=vim
    fi
    $editor ${BASH_SOURCE}
}

pacProxy(){
    upstream=${1}
    port=${2}
    bash macProxy/setMacProxy.sh pac $upstream $port
}

unsetPacProxy(){
    bash macProxy/setMacProxy.sh unset pac
}

socksProxy(){
    port="$1"
    bash macProxy/setMacProxy.sh socks "$port"
}

unsetSocksProxy(){
    bash macProxy/setMacProxy.sh unset socks
}

macProxy(){
    bash macProxy/setMacProxy.sh "$@"
}

cmd=$1
shift
case $cmd in
    add)
        add
        ;;
    list)
        list
        ;;
    del|delete|rm|remove)
        delete "$@"
        ;;
    start)
        start "$@"
        ;;
    restart)
        stop "$@"
        start "$@"
        ;;
    stop)
        stop "$@"
        ;;
    pac)
        pac
        ;;
    status)
        status "$@"
        ;;
    log)
        log "$@"
        ;;
    edit)
        edit "$@"
        ;;
    copy|cp)
        copy "$@"
        ;;
    em)
        em
        ;;
    macProxy|mp)
        macProxy "$@"
        ;;
    pacProxy)
        pacProxy "$@"
        ;;
    unsetPacProxy)
        unsetPacProxy
        ;;
    socksProxy)
        socksProxy "$@"
        ;;
    unsetSocksProxy)
        unsetSocksProxy
        ;;
    *)
        usage
        ;;
esac
